// Generated by CoffeeScript 1.6.2
(function() {
  var CopyCopter;

  CopyCopter = (function() {
    var create;

    create = function(options) {
      var apiKey, callbacks, createTranslation, drain, exports, getUrl, hasTranslation, host, interpolate, isLoaded, lookup, onTranslationsLoaded, password, postUrl, translate, translations, uploadTranslations, username;

      if (!(host = options.host)) {
        throw 'please provide the host';
      }
      if (!(apiKey = options.apiKey)) {
        throw 'please provide the apiKey';
      }
      username = options.username;
      password = options.password;
      if ((username != null) ^ (password != null)) {
        throw 'please provide a username and password';
      }
      uploadTranslations = (username != null) && (password != null);
      getUrl = "//" + host + "/api/v2/projects/" + apiKey + "/published_blurbs?format=hierarchy";
      postUrl = "//" + host + "/api/v2/projects/" + apiKey + "/draft_blurbs";
      isLoaded = false;
      translations = {};
      callbacks = [];
      drain = function() {
        var cb, _results;

        _results = [];
        while (cb = callbacks.shift()) {
          _results.push(cb());
        }
        return _results;
      };
      createTranslation = function(key, defaultValue) {
        var data;

        data = {};
        data[key] = defaultValue;
        return jQuery.ajax({
          username: username,
          password: password,
          url: postUrl,
          type: 'POST',
          dataType: 'JSON',
          data: data
        });
      };
      lookup = function(key, scope) {
        var msg, _i, _len;

        scope = ['en'].concat(key.split('.'));
        msg = translations;
        for (_i = 0, _len = scope.length; _i < _len; _i++) {
          key = scope[_i];
          msg = msg != null ? msg[key] : void 0;
        }
        if (msg != null) {
          return msg;
        }
      };
      interpolate = function(msg, scope) {
        var key, regex, value;

        for (key in scope) {
          value = scope[key];
          regex = new RegExp("(.*)(?:\%|\{){" + key + "}}?(.*)", 'i');
          if (regex.test(msg)) {
            msg = msg.replace(regex, "$1" + value + "$2");
          }
        }
        return msg;
      };
      translate = function(key, options) {
        var defaultValue;

        if (options == null) {
          options = {};
        }
        defaultValue = options.defaultValue;
        delete options.defaultValue;
        if (uploadTranslations && !hasTranslation(key)) {
          createTranslation(key, defaultValue);
        }
        return interpolate(lookup(key) || defaultValue, options);
      };
      onTranslationsLoaded = function(callback) {
        if (isLoaded) {
          return callback();
        } else {
          return callbacks.push(callback);
        }
      };
      hasTranslation = function(key) {
        return !!lookup(key);
      };
      (function() {
        var request;

        request = jQuery.ajax({
          url: getUrl,
          cache: true,
          dataType: 'jsonp'
        });
        request.success(function(data) {
          return translations = data;
        });
        request.success(function() {
          return isLoaded = true;
        });
        return request.always(drain);
      })();
      exports = {};
      exports.translate = translate;
      exports.onTranslationsLoaded = onTranslationsLoaded;
      exports.hasTranslation = hasTranslation;
      exports.t = translate;
      return exports;
    };
    return function(options) {
      return create(options);
    };
  })();

  if (typeof window !== "undefined" && window !== null) {
    window.CopyCopter = CopyCopter;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = CopyCopter;
  }

}).call(this);
