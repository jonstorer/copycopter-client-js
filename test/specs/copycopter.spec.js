// Generated by CoffeeScript 1.6.2
(function() {
  describe('CopyCopter', function() {
    describe('when initializing', function() {
      beforeEach(function() {
        return this.options = {
          apiKey: 'key',
          host: 'example.com'
        };
      });
      it('takes an apiKey', function() {
        var cc;

        cc = new CopyCopter(this.options);
        return cc.apiKey.should.equal('key');
      });
      it('takes a host', function() {
        var cc;

        cc = new CopyCopter(this.options);
        return cc.host.should.equal('example.com');
      });
      it('throws an error without a host', function() {
        var _this = this;

        this.options.host = void 0;
        return (function() {
          return new CopyCopter(_this.options);
        }).should.Throw('please provide the host');
      });
      return it('throws an error without an apiKey', function() {
        var _this = this;

        delete this.options.apiKey;
        return (function() {
          return new CopyCopter(_this.options);
        }).should.Throw('please provide the apiKey');
      });
    });
    return describe('fetching the translations from the server', function() {
      beforeEach(function() {
        this.copycopter = new CopyCopter({
          apiKey: 'key',
          host: 'example.com'
        });
        this.jqXHR = $.Deferred();
        $.extend(this.jqXHR, {
          readyState: 0,
          setRequestHeader: function() {
            return this;
          },
          getAllResponseHeaders: function() {},
          getResponseHeader: function() {},
          overrideMimeType: function() {
            return this;
          },
          abort: function() {
            this.reject(arguments);
            return this;
          },
          success: this.jqXHR.done,
          complete: this.jqXHR.done,
          error: this.jqXHR.fail
        });
        sinon.stub(jQuery, 'ajax').returns(this.jqXHR);
        return this.copycopter.translate('step.one', {
          defaultValue: 'Cut a hole in the box'
        });
      });
      afterEach(function() {
        return jQuery.ajax.restore();
      });
      it('fetches translations when it has none', function() {
        return jQuery.ajax.should.have.been.calledWith({
          url: '//example.com/api/v2/projects/key/published_blurbs?format=hierarchy',
          cache: true,
          dataType: 'jsonp'
        });
      });
      it('loads the translations in memory', function() {
        this.jqXHR.resolve({
          en: {
            step: {
              one: 'Cut a hole in a box'
            }
          }
        });
        return this.copycopter.translations.en.step.one = 'Cut a hole in a box';
      });
      it('returns found translations', function() {
        this.jqXHR.resolve({
          en: {
            step: {
              one: 'Cut a hole in a box'
            }
          }
        });
        return this.copycopter.translate('step.one', {
          defaultValue: 'Cut a whole in the box'
        }).should.eql('Cut a hole in a box');
      });
      it('returns the default translation when not found', function() {
        this.jqXHR.resolve({});
        return this.copycopter.translate('step.one', {
          defaultValue: 'Cut a hole in the box'
        }).should.eql('Cut a hole in the box');
      });
      it('interpolates %{key}', function() {
        this.jqXHR.resolve({
          en: {
            step: {
              one: 'Cut a %{shape} in a box'
            }
          }
        });
        return this.copycopter.translate('step.one', {
          defaultValue: 'Cut a %{shape} in the box',
          shape: 'cresent'
        }).should.eql('Cut a cresent in a box');
      });
      return it('interpolates {{key}}', function() {
        this.jqXHR.resolve({
          en: {
            step: {
              one: 'Cut a {{shape}} in a box'
            }
          }
        });
        return this.copycopter.translate('step.one', {
          defaultValue: 'Cut a {{shape}} in the box',
          shape: 'cresent'
        }).should.eql('Cut a cresent in a box');
      });
    });
  });

}).call(this);
